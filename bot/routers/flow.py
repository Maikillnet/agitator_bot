# bot/routers/flow.py
from __future__ import annotations

import re
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import Message
from sqlalchemy import select

from ..states import Survey  # —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ states –µ—Å—Ç—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
from ..db import async_session
from ..repo import (
    get_or_create_agent, create_visit, close_visit, create_contact,
    update_contact_fields, close_contact, flyer_exists,
)
from ..models import RepeatTouch, TalkStatus, FlyerMethod, Contact
from ..utils.phone import normalize_phone
from ..utils.webhook import send_lottery_code

from ..keyboards import (
    remove, kb_main, kb_cancel, kb_finish_or_add,
    kb_repeat_touch, kb_status, kb_flyer_method, kb_yes_no,
    BTN_NEW, BTN_CANCEL, BTN_FINISH, BTN_ADD_MORE, BTN_MAIN_MENU,
    BTN_PRIMARY, BTN_SECONDARY,
    BTN_NO_ONE, BTN_REFUSAL, BTN_CONSENT,
    BTN_HAND, BTN_MAILBOX, BTN_NO,
    BTN_YES, BTN_NOT,
)

router = Router(name="flow")


# ===== –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def _main_kb_for(user_id: int):
    async with async_session() as session:
        agent = await get_or_create_agent(session, user_id)
        await session.commit()
        is_admin = bool(getattr(agent, "admin_logged_in", False))
    return kb_main(is_admin=is_admin)


# ===== –æ—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —à–∞–≥–∞—Ö
STRICT_STATES = (
    Survey.waiting_photo_door,
    Survey.waiting_mailbox_photo,
    Survey.waiting_flyer_number,
)

@router.message(StateFilter(*STRICT_STATES), F.text == BTN_CANCEL)
async def deny_cancel_on_strict_steps(m: Message, state: FSMContext):
    await m.answer("‚ùóÔ∏è–ù–∞ —ç—Ç–æ–º —à–∞–≥–µ –æ—Ç–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")


@router.message(F.text == BTN_CANCEL)
async def on_cancel(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–û–∫–µ–π, –ø—Ä–µ—Ä–≤–∞–ª. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=await _main_kb_for(m.from_user.id))


# ===== —Å—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞
@router.message(F.text == BTN_NEW)
async def start_visit(m: Message, state: FSMContext):
    display_name = " ".join(filter(None, [m.from_user.first_name, m.from_user.last_name])).strip() or None
    username = m.from_user.username or None
    async with async_session() as session:
        agent = await get_or_create_agent(session, m.from_user.id, name=display_name, username=username)
        visit = await create_visit(session, agent_id=agent.id)
        await session.commit()
    await state.update_data(visit_id=visit.id, agent_id=agent.id, additional=False)

    await m.answer("üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —É –¥–≤–µ—Ä–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).", reply_markup=remove())
    await state.set_state(Survey.waiting_photo_door)


# ===== —Ñ–æ—Ç–æ —É –¥–≤–µ—Ä–∏
@router.message(Survey.waiting_photo_door, F.photo)
async def door_photo(m: Message, state: FSMContext):
    # –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–º —Ñ–∞–∫—Ç —Ñ–æ—Ç–æ ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ —É –≤–∏–∑–∏—Ç–∞/–∫–æ–Ω—Ç–∞–∫—Ç–∞
    await m.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏–∑–±–∏—Ä–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á).", reply_markup=kb_cancel())
    await state.set_state(Survey.waiting_full_name)


@router.message(Survey.waiting_photo_door)
async def door_photo_required(m: Message, state: FSMContext):
    # –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç-–∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ —Ñ–æ—Ç–æ
    if m.document and (m.document.mime_type or "").startswith("image/"):
        await m.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á).", reply_markup=kb_cancel())
        await state.set_state(Survey.waiting_full_name)
        return
    await m.answer("üì∏ –ñ–¥—É —Ñ–æ—Ç–æ —É –¥–≤–µ—Ä–∏ ‚Äî —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–≥.")


# ===== –§–ò–û
@router.message(Survey.waiting_full_name, F.text)
async def get_full_name(m: Message, state: FSMContext):
    raw = (m.text or "").strip()
    parts = [p for p in re.split(r"\s+", raw) if p]

    def _is_cyr_word(w: str) -> bool:
        return re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë-]+", w) is not None

    if len(parts) != 3 or not all(_is_cyr_word(p) for p in parts):
        await m.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –§–ò–û –∏–∑–±–∏—Ä–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é: —Ñ–∞–º–∏–ª–∏—è, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ.", reply_markup=kb_cancel())
        return

    def _cap(s: str) -> str:
        return "-".join([w.capitalize() for w in s.split("-")])

    fam, nam, otc = (_cap(parts[0]), _cap(parts[1]), _cap(parts[2]))
    full_name = f"{fam} {nam} {otc}"

    await state.update_data(full_name=full_name)
    await m.answer("üìû –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑–±–∏—Ä–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX (—Ä–æ–≤–Ω–æ 11 —Ü–∏—Ñ—Ä).", reply_markup=kb_cancel())
    await m.answer("–ü–æ–¥—Å–∫–∞–∑–∫–∞: +79991234567")
    await state.set_state(Survey.waiting_phone)


# ===== —Ç–µ–ª–µ—Ñ–æ–Ω (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º)
@router.message(Survey.waiting_phone, F.contact)
async def get_phone_contact(m: Message, state: FSMContext):
    phone = normalize_phone(m.contact.phone_number)
    if not phone:
        await m.answer("‚ö†Ô∏è –ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä –∏–∑–±–∏—Ä–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: +7XXXXXXXXXX.")
        return
    await _commit_phone_and_open_next_steps(m, state, phone)


@router.message(Survey.waiting_phone)
async def get_phone(m: Message, state: FSMContext):
    phone = normalize_phone(m.text)
    if not phone:
        await m.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑–±–∏—Ä–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX")
        return
    await _commit_phone_and_open_next_steps(m, state, phone)


async def _commit_phone_and_open_next_steps(m: Message, state: FSMContext, phone: str):
    data = await state.get_data()
    visit_id = data["visit_id"]
    agent_id = data["agent_id"]
    full_name = data["full_name"]

    async with async_session() as session:
        contact = await create_contact(
            session,
            visit_id=visit_id,
            agent_id=agent_id,
            full_name=full_name,
            phone_e164=phone,
        )
        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ —É –¥–≤–µ—Ä–∏ –±—ã–ª–æ
        await update_contact_fields(session, contact.id, door_photo=True)
        await session.commit()

    await state.update_data(contact_id=contact.id, phone=phone)

    if data.get("additional"):
        await m.answer("üéü –í—ã–¥–∞—á–∞ —Ñ–ª–∞–µ—Ä–∞: –∫–∞–∫ –ø–µ—Ä–µ–¥–∞–ª–∏?", reply_markup=kb_flyer_method())
        await state.set_state(Survey.waiting_flyer_method)
    else:
        await m.answer("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–æ—Å—Ç—å –∫–∞—Å–∞–Ω–∏—è: –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=kb_repeat_touch())
        await state.set_state(Survey.waiting_repeat_touch)


# ===== –ø–æ–≤—Ç–æ—Ä–Ω–æ—Å—Ç—å –∫–∞—Å–∞–Ω–∏—è
@router.message(Survey.waiting_repeat_touch, F.text.in_([BTN_PRIMARY, BTN_SECONDARY]))
async def choose_repeat(m: Message, state: FSMContext):
    val = RepeatTouch.PRIMARY if m.text == BTN_PRIMARY else RepeatTouch.SECONDARY
    data = await state.get_data()
    contact_id = data["contact_id"]
    async with async_session() as session:
        await update_contact_fields(session, contact_id, repeat_touch=val)
        await session.commit()
    await m.answer("üó£ –°—Ç–∞—Ç—É—Å –æ–±—â–µ–Ω–∏—è: –∫–∞–∫ –ø—Ä–æ—à–ª–æ?", reply_markup=kb_status())
    await state.set_state(Survey.waiting_talk_status)


# ===== —Å—Ç–∞—Ç—É—Å –æ–±—â–µ–Ω–∏—è
@router.message(Survey.waiting_talk_status, F.text.in_([BTN_NO_ONE, BTN_REFUSAL, BTN_CONSENT]))
async def choose_talk_status(m: Message, state: FSMContext):
    mapping = {
        BTN_NO_ONE: TalkStatus.NO_ONE,
        BTN_REFUSAL: TalkStatus.REFUSAL,
        BTN_CONSENT: TalkStatus.CONSENT,
    }
    status = mapping[m.text]
    data = await state.get_data()
    contact_id = data["contact_id"]

    async with async_session() as session:
        await update_contact_fields(session, contact_id, talk_status=status)
        await session.commit()

    if status == TalkStatus.NO_ONE:
        # –ø–µ—Ä–≤–∏—á–∫–∞ + –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç ‚Üí –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        async with async_session() as session:
            res = await session.execute(select(Contact).where(Contact.id == contact_id))
            c = res.scalars().first()
            if c and c.repeat_touch == RepeatTouch.PRIMARY:
                await close_contact(session, contact_id)
                await session.commit()
                await state.update_data(last_closed_contact_id=contact_id)
                await m.answer("–ù–∏–∫–æ–≥–æ –Ω–µ—Ç (–ø–µ—Ä–≤–∏—á–Ω—ã–π –æ–±—Ö–æ–¥). –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb_finish_or_add())
                await state.set_state(Survey.waiting_finish_choice)
                return

        # –∏–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        await m.answer("–ù–∏–∫–æ–≥–æ –Ω–µ—Ç (–≤—Ç–æ—Ä–∏—á–Ω—ã–π –æ–±—Ö–æ–¥). üéü –í—ã–¥–∞—á–∞ —Ñ–ª–∞–µ—Ä–∞: –∫–∞–∫ –ø–µ—Ä–µ–¥–∞–ª–∏?", reply_markup=kb_flyer_method())
        await state.set_state(Survey.waiting_flyer_method)
        return

    await m.answer("üéü –í—ã–¥–∞—á–∞ —Ñ–ª–∞–µ—Ä–∞: –∫–∞–∫ –ø–µ—Ä–µ–¥–∞–ª–∏?", reply_markup=kb_flyer_method())
    await state.set_state(Survey.waiting_flyer_method)


@router.message(Survey.waiting_flyer_method, F.text.in_([BTN_HAND, BTN_MAILBOX, BTN_NO]))
async def choose_flyer(m: Message, state: FSMContext):
    mapping = {
        BTN_HAND:    FlyerMethod.HAND,
        BTN_MAILBOX: FlyerMethod.MAILBOX,
        BTN_NO:      FlyerMethod.NONE,
    }
    method = mapping[m.text]

    data = await state.get_data()
    contact_id = data["contact_id"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–æ–¥ –≤—ã–¥–∞—á–∏
    async with async_session() as session:
        await update_contact_fields(session, contact_id, flyer_method=method)
        await session.commit()

    # ‚ùó –ò "–ù–∞ —Ä—É–∫–∏", –∏ "–í —è—â–∏–∫" ‚Üí –ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä —Ñ–ª–∞–µ—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    if method in (FlyerMethod.HAND, FlyerMethod.MAILBOX):
        await prompt_flyer_number(m, state)
        return

    # üö´ –ù–µ –≤—ã–¥–∞–≤–∞–ª–∏ ‚Üí —Å—Ä–∞–∑—É –∫ –≤–æ–ø—Ä–æ—Å—É –ø—Ä–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–æ–º—É
    await m.answer("üè† –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–æ–º—É: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —É—Ä–Ω–∞?", reply_markup=kb_yes_no())
    await state.set_state(Survey.waiting_home_voting)

# --- –ü–û–î–°–∫–∞–∑–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ñ–ª–∞–µ—Ä–∞ ---
async def prompt_flyer_number(m: Message, state: FSMContext):
    await m.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–ª–∞–µ—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –æ—Ç 1 –¥–æ 60 000.", reply_markup=remove())
    await state.set_state(Survey.waiting_flyer_number)


# --- –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ñ–ª–∞–µ—Ä–∞ ---
@router.message(Survey.waiting_flyer_number, F.text)
async def flyer_number_input(m: Message, state: FSMContext):
    text = (m.text or "").strip()
    if not text.isdigit():
        await m.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç –æ—Ç 1 –¥–æ 60 000.")
        return

    num = int(text)
    if not (1 <= num <= 60_000):
        await m.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç 1 –¥–æ 60 000.")
        return

    # —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    async with async_session() as session:
        if await flyer_exists(session, num):
            await m.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä —Ñ–ª–∞–µ—Ä–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è. –£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
            return

    data = await state.get_data()
    contact_id = data["contact_id"]

    async with async_session() as session:
        await update_contact_fields(session, contact_id, flyer_number=str(num))
        await session.commit()

    # —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–æ–¥ –≤ FSM, —á—Ç–æ–±—ã –≤–µ–±—Ö—É–∫ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –µ–≥–æ –ø–æ–ª—É—á–∏–ª
    await state.update_data(lottery_code=str(num))

    await m.answer("üè† –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–æ–º—É: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —É—Ä–Ω–∞?", reply_markup=kb_yes_no())
    await state.set_state(Survey.waiting_home_voting)


@router.message(Survey.waiting_flyer_number)
async def flyer_number_required(m: Message, state: FSMContext):
    await m.answer("#Ô∏è‚É£ –ù–æ–º–µ—Ä —Ñ–ª–∞–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")


# --- –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–æ–º—É + –≤—ã–∑–æ–≤ –≤–µ–±—Ö—É–∫–∞ ---
@router.message(Survey.waiting_home_voting, F.text.in_([BTN_YES, BTN_NOT]))
async def home_voting(m: Message, state: FSMContext):
    voting_at_home = (m.text == BTN_YES)
    await state.update_data(voting_at_home=voting_at_home)

    data = await state.get_data()
    phone_raw = data.get("phone")
    code = data.get("lottery_code")
    cid = data.get("contact_id")

    # –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî –¥–æ–±–∏—Ä–∞–µ–º –∏–∑ –ë–î
    if (not phone_raw or not code) and cid:
        async with async_session() as session:
            c = await session.get(Contact, cid)
            if c:
                phone_raw = phone_raw or c.phone_e164
                code = code or (c.flyer_number or "")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫ (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞)
    if phone_raw and code and not data.get("wh_sent"):
        await state.update_data(wh_sent=True)
        ok, msg = await send_lottery_code(phone_raw, code, voting_at_home)
        if ok:
            await m.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        else:
            await m.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. {msg}")

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º home_voting –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
    if cid:
        async with async_session() as session:
            await update_contact_fields(session, cid, home_voting=voting_at_home)
            await close_contact(session, cid)
            await session.commit()
        await state.update_data(last_closed_contact_id=cid)

    await m.answer("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –≥–æ—Ç–æ–≤–∞. –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Ö–æ–¥ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–∑–±–∏—Ä–∞—Ç–µ–ª—è?",
                   reply_markup=kb_finish_or_add())
    await state.set_state(Survey.waiting_finish_choice)

# ===== –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã / –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë
@router.message(Survey.waiting_finish_choice, F.text.in_([BTN_FINISH, BTN_ADD_MORE, BTN_MAIN_MENU]))
async def finish_choice(m: Message, state: FSMContext):
    data = await state.get_data()
    visit_id = data.get("visit_id")

    if m.text == BTN_FINISH:
        async with async_session() as session:
            await close_visit(session, visit_id)
            await session.commit()
        await state.clear()
        await m.answer("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=await _main_kb_for(m.from_user.id))
        return

    if m.text == BTN_ADD_MORE:
        await state.update_data(additional=True,  # –ø–æ–º–µ—Ç–∏–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π ‚Äî ¬´–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π¬ª
                               phone=None, lottery_code=None, wh_sent=False)
        await m.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏–∑–±–∏—Ä–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á).", reply_markup=kb_cancel())
        await state.set_state(Survey.waiting_full_name)
        return

    # BTN_MAIN_MENU
    await state.clear()
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=await _main_kb_for(m.from_user.id))
