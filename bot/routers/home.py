# bot/routers/home.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from ..db import async_session
from ..repo import (
    is_member_blocked,
    get_or_create_agent,
    is_brig_logged_in,
    set_brig_login,
    is_brigadier_allowed,
)
from ..keyboards import (
    BTN_ACCESS, BTN_ADMIN, BTN_ADMIN_LOGIN,
    BTN_BRIG_LOGIN, BTN_BRIG_LOGOUT, BTN_BRIG_MENU, BTN_BACK, BTN_HELP,
    kb_access_menu, kb_admin_menu, kb_brig_menu, kb_main,
)

router = Router(name="home")

async def _is_admin_logged(user_id: int) -> bool:
    # –µ—Å–ª–∏ —É Agent –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—è ‚Äî –≤—Å–µ–≥–¥–∞ False (getattr)
    async with async_session() as session:
        agent = await get_or_create_agent(session, user_id)
        await session.commit()
        return bool(getattr(agent, "admin_logged_in", False))

async def _is_brig_logged(user_id: int) -> bool:
    async with async_session() as session:
        return await is_brig_logged_in(session, user_id)

@router.message(CommandStart())
async def cmd_start(m: Message, state: FSMContext):
    await state.clear()
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞
    async with async_session() as session:
        await get_or_create_agent(
            session,
            m.from_user.id,
            name=m.from_user.full_name,
            username=m.from_user.username,
        )
        await session.commit()
    # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    async with async_session() as s2:
        if await is_member_blocked(s2, m.from_user.id):
            await m.answer('‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ –æ–ø—Ä–æ—Å–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/–±—Ä–∏–≥–∞–¥–∏—Ä–æ–º.')
            return
    admin_ok = await _is_admin_logged(m.from_user.id)
    brig_ok = await _is_brig_logged(m.from_user.id)
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞ —Å–≤—è–∑–∏. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb_main(is_admin=admin_ok, is_brig=brig_ok),
    )

@router.message(F.text == BTN_ACCESS)
async def access_menu(m: Message):
    admin_ok = await _is_admin_logged(m.from_user.id)
    brig_ok = await _is_brig_logged(m.from_user.id)
    await m.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–∞:",
        reply_markup=kb_access_menu(brig_logged=brig_ok, admin_logged=admin_ok),
    )

@router.message(F.text == BTN_BRIG_LOGIN)
async def brig_login(m: Message):
    async with async_session() as session:
        if not await is_brigadier_allowed(session, m.from_user.id):
            await m.answer("–í–∞—Å –µ—â—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–º. –°–Ω–∞—á–∞–ª–∞ –∞–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ —Å–ø–∏—Å–æ–∫.")
            return
        await set_brig_login(session, m.from_user.id, True)
        await session.commit()
    await m.answer("‚úÖ –í—Ö–æ–¥ –∫–∞–∫ –±—Ä–∏–≥–∞–¥–∏—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω.", reply_markup=kb_brig_menu())

@router.message(F.text == BTN_BRIG_LOGOUT)
async def brig_logout(m: Message):
    async with async_session() as session:
        await set_brig_login(session, m.from_user.id, False)
        await session.commit()
    # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    async with async_session() as s2:
        if await is_member_blocked(s2, m.from_user.id):
            await m.answer('‚õîÔ∏è –î–æ—Å—Ç—É–ø –∫ –æ–ø—Ä–æ—Å–∞–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/–±—Ä–∏–≥–∞–¥–∏—Ä–æ–º.')
            return
    admin_ok = await _is_admin_logged(m.from_user.id)
    await m.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ –±—Ä–∏–≥–∞–¥–∏—Ä—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞.",
        reply_markup=kb_access_menu(brig_logged=False, admin_logged=admin_ok),
    )

@router.message(F.text == BTN_BRIG_MENU)
async def open_brig_menu(m: Message):
    brig_ok = await _is_brig_logged(m.from_user.id)
    if not brig_ok:
        await m.answer(
            "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –±—Ä–∏–≥–∞–¥–∏—Ä.",
            reply_markup=kb_access_menu(brig_logged=False, admin_logged=await _is_admin_logged(m.from_user.id)),
        )
        return
    await m.answer("ü™ñ –ë—Ä–∏–≥–∞–¥–∏—Ä-–º–µ–Ω—é", reply_markup=kb_brig_menu())

@router.message(F.text == BTN_HELP)
async def on_help(m: Message):
    admin_ok = await _is_admin_logged(m.from_user.id)
    brig_ok = await _is_brig_logged(m.from_user.id)
    text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n"
        "‚Äî ¬´–ù–æ–≤—ã–π –æ–ø—Ä–æ—Å¬ª ‚Äî –∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±—Ö–æ–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä.\n"
        "‚Äî ¬´–°–≤–æ–¥–∫–∞ –∑–∞ —Å–º–µ–Ω—É¬ª ‚Äî –≤–∞—à–∏ —Ü–∏—Ñ—Ä—ã –∑–∞ 24 —á–∞—Å–∞.\n"
        "‚Äî ¬´–î–æ—Å—Ç—É–ø¬ª ‚Äî –≤—Ö–æ–¥ –≤ –ê–¥–º–∏–Ω-–º–µ–Ω—é –∏ –ë—Ä–∏–≥–∞–¥–∏—Ä-—Ä–µ–∂–∏–º.\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´/start¬ª."
    )
    await m.answer(text, reply_markup=kb_main(is_admin=admin_ok, is_brig=brig_ok))

@router.message(F.text == BTN_BACK)
async def back_to_main(m: Message, state: FSMContext):
    await state.clear()
    admin_ok = await _is_admin_logged(m.from_user.id)
    brig_ok = await _is_brig_logged(m.from_user.id)
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb_main(is_admin=admin_ok, is_brig=brig_ok))
