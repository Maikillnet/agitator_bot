from __future__ import annotations

import io
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select

# pandas –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º openpyxl
try:
    import pandas as pd
except Exception:
    pd = None

from ..db import async_session
from ..models import Agent
from ..repo import (
    get_or_create_agent,
    ensure_brig_tables,
    is_brigadier_allowed,
    set_brig_login,
    is_brig_logged_in,
    get_agent_by_username,
    set_brig_member,
    remove_brig_member,
    list_brigadier_member_agent_ids,
    agents_stats_for_period,
    block_member_by_username,
)
from ..keyboards import (
    kb_brig_menu, kb_brig_blacklist, kb_export_ranges,
    BTN_BRIG_MENU, BTN_BRIG_MEMBERS, BTN_BRIG_ATTACH, BTN_BRIG_DETACH,
    BTN_BRIG_BLACKLIST, BTN_BRIG_BLOCK, BTN_BRIG_UNBLOCK,
    BTN_BRIG_STATS, BTN_BRIG_EXPORT_XLSX, BTN_BRIG_LOGOUT, BTN_BRIG_HELP,
    BTN_BACK, BTN_ACCESS, BTN_BRIG_LOGIN,
    BTN_EXP_TODAY, BTN_EXP_7, BTN_EXP_30, BTN_EXP_ALL,
)

router = Router(name="brigadier")


# ===== –°–æ—Å—Ç–æ—è–Ω–∏—è =====
class BrigAuth(StatesGroup):
    waiting_id = State()


class BrigAttachUser(StatesGroup):
    waiting_username = State()


class BrigDetachUser(StatesGroup):
    waiting_username = State()


class BrigBlockUser(StatesGroup):
    waiting_username = State()


class BrigStats(StatesGroup):
    waiting_range = State()

async def _main_kb_for(user_id: int):
    async with async_session() as session:
        agent = await get_or_create_agent(session, user_id)
        await ensure_brig_tables(session)
        await session.commit()
        admin = bool(getattr(agent, "admin_logged_in", False))
        brig_logged = await is_brig_logged_in(session, user_id)
    return kb_main(is_admin=admin, is_brig=brig_logged)

# -------- Access --------
@router.message(F.text == BTN_ACCESS)
async def access_menu(m: Message):
    async with async_session() as session:
        await ensure_brig_tables(session)
        brig_logged = await is_brig_logged_in(session, m.from_user.id)
    await m.answer("üîë –î–æ—Å—Ç—É–ø:", reply_markup=kb_access_menu(brig_logged=brig_logged, admin_logged=False))

# -------- Login/logout --------
@router.message(F.text == BTN_BRIG_LOGIN)
async def brig_login_start(m: Message, state: FSMContext):
    await state.set_state(BrigAuth.waiting_id)
    await m.answer("üßë‚Äç‚úàÔ∏è –í—Ö–æ–¥ –±—Ä–∏–≥–∞–¥–∏—Ä–∞.\n–í–≤–µ–¥–∏—Ç–µ <b>–≤–∞—à ID</b> (—á–∏—Å–ª–æ).")

@router.message(BrigAuth.waiting_id)
async def brig_login_finish(m: Message, state: FSMContext):
    raw = (m.text or "").strip()
    if not raw.isdigit():
        await m.answer("–ù—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID.")
        return
    entered_id = int(raw)

    async with async_session() as session:
        await ensure_brig_tables(session)
        allowed = await is_brigadier_allowed(session, m.from_user.id)
        if not allowed:
            await state.clear()
            await m.answer("‚õîÔ∏è –í–∞–º –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å –±—Ä–∏–≥–∞–¥–∏—Ä–∞.")
            return

        agent = await get_or_create_agent(session, m.from_user.id)
        if agent.id != entered_id:
            await state.clear()
            await m.answer("‚ùå ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        await set_brig_login(session, m.from_user.id, True)
        await session.commit()

    await state.clear()
    await m.answer("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.", reply_markup=kb_brig_menu())
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=await _main_kb_for(m.from_user.id))

@router.message(F.text == BTN_BRIG_LOGOUT)
async def brig_logout(m: Message, state: FSMContext):
    async with async_session() as session:
        await ensure_brig_tables(session)
        await set_brig_login(session, m.from_user.id, False)
        await session.commit()
    await state.clear()
    await m.answer("üö™ –†–µ–∂–∏–º –±—Ä–∏–≥–∞–¥–∏—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω.", reply_markup=await _main_kb_for(m.from_user.id))

@router.message(F.text == BTN_BRIG_BLACKLIST)
async def brig_blacklist_menu(m: Message):
    async with async_session() as session:
        if not await is_brig_logged_in(session, m.from_user.id):
            await m.answer("‚õîÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –±—Ä–∏–≥–∞–¥–∏—Ä —á–µ—Ä–µ–∑ ¬´üîë –î–æ—Å—Ç—É–ø¬ª.")
            return
    await m.answer("üß± –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_brig_blacklist())

@router.message(F.text == BTN_BRIG_MENU)
async def brig_menu(m: Message):
    async with async_session() as session:
        await ensure_brig_tables(session)
        if not await is_brig_logged_in(session, m.from_user.id):
            await m.answer("‚õîÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –±—Ä–∏–≥–∞–¥–∏—Ä —á–µ—Ä–µ–∑ ¬´üîë –î–æ—Å—Ç—É–ø¬ª.")
            return
    await m.answer("üßë‚Äç‚úàÔ∏è –ú–µ–Ω—é –±—Ä–∏–≥–∞–¥–∏—Ä–∞", reply_markup=kb_brig_menu())

# -------- Members: combined list --------
@router.message(F.text == BTN_BRIG_MEMBERS)
async def brig_list_members(m: Message):
    async with async_session() as session:
        if not await is_brig_logged_in(session, m.from_user.id):
            await m.answer("‚õîÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –±—Ä–∏–≥–∞–¥–∏—Ä —á–µ—Ä–µ–∑ ¬´üîë –î–æ—Å—Ç—É–ø¬ª.")
            return
        agent_ids = await list_brigadier_member_agent_ids(session, m.from_user.id)
        if not agent_ids:
            await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", reply_markup=kb_brig_menu())
            return
        rows = await session.execute(
            # –ü–æ–ª—É—á–∏–º username/–∏–º—è –¥–ª—è —Å–ø–∏—Å–∫–∞
            __import__('sqlalchemy').select(Agent).where(Agent.id.in_(agent_ids))
        )
        agents = rows.scalars().all()
    lines = ["<b>üë• –í–∞—à–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏</b>"]
    for a in agents:
        uname = f"@{a.username}" if a.username else "(–±–µ–∑ @)"
        name = a.name or ""
        lines.append(f"‚Ä¢ {uname} ‚Äî {name} (ID {a.id})")
    lines.append("\n–î–µ–π—Å—Ç–≤–∏—è: ¬´–ü—Ä–∏–≤—è–∑–∞—Ç—å¬ª, ¬´–û—Ç–≤—è–∑–∞—Ç—å¬ª, ¬´–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å¬ª.")
    await m.answer("\n".join(lines), reply_markup=kb_brig_menu())

# -------- Attach by @username --------
@router.message(F.text == BTN_BRIG_ATTACH)
async def brig_attach_by_username_ask(m: Message, state: FSMContext):
    async with async_session() as session:
        if not await is_brig_logged_in(session, m.from_user.id):
            await m.answer("‚õîÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –±—Ä–∏–≥–∞–¥–∏—Ä.")
            return
    await state.set_state(BrigAttachUser.waiting_username)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ @username —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ <b>–ø—Ä–∏–≤—è–∑–∞—Ç—å</b> –∫ —Å–µ–±–µ.")

@router.message(BrigAttachUser.waiting_username)
async def brig_attach_by_username_save(m: Message, state: FSMContext):
    uname = (m.text or "").strip().lstrip("@")
    async with async_session() as session:
        if not await is_brig_logged_in(session, m.from_user.id):
            await state.clear()
            await m.answer("‚õîÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –±—Ä–∏–≥–∞–¥–∏—Ä.")
            return
        agent = await get_agent_by_username(session, uname)
        if not agent:
            await m.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ @username. –ß–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É —Ö–æ—Ç—è –±—ã —Ä–∞–∑.")
            return
        await set_brig_member(session, brig_tg_id=m.from_user.id, member_tg_id=int(agent.tg_user_id))
        await session.commit()
    await state.clear()
    await m.answer(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ @{uname} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞–º.", reply_markup=kb_brig_menu())

# -------- Detach by @username --------
@router.message(F.text == BTN_BRIG_DETACH)
async def brig_detach_by_username_ask(m: Message, state: FSMContext):
    async with async_session() as session:
        if not await is_brig_logged_in(session, m.from_user.id):
            await m.answer("‚õîÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –±—Ä–∏–≥–∞–¥–∏—Ä.")
            return
    await state.set_state(BrigDetachUser.waiting_username)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ @username —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ <b>–æ—Ç–≤—è–∑–∞—Ç—å</b> –æ—Ç —Å–µ–±—è.")

@router.message(BrigDetachUser.waiting_username)
async def brig_detach_by_username_save(m: Message, state: FSMContext):
    uname = (m.text or "").strip().lstrip("@")
    async with async_session() as session:
        if not await is_brig_logged_in(session, m.from_user.id):
            await state.clear()
            await m.answer("‚õîÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –±—Ä–∏–≥–∞–¥–∏—Ä.")
            return
        agent = await get_agent_by_username(session, uname)
        if not agent:
            await m.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ @username.")
            return
        await remove_brig_member(session, brig_tg_id=m.from_user.id, member_tg_id=int(agent.tg_user_id))
        await session.commit()
    await state.clear()
    await m.answer(f"üßπ –£—á–∞—Å—Ç–Ω–∏–∫ @{uname} –æ—Ç–≤—è–∑–∞–Ω.", reply_markup=kb_brig_menu())

# -------- Block by @username --------
@router.message(F.text == BTN_BRIG_BLOCK)
async def brig_block_ask(m: Message, state: FSMContext):
    async with async_session() as session:
        if not await is_brig_logged_in(session, m.from_user.id):
            await m.answer("‚õîÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –±—Ä–∏–≥–∞–¥–∏—Ä.")
            return
    await state.set_state(BrigBlockUser.waiting_username)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ @username —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ <b>–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å</b> –≤ —á–∞—Ç–µ/–±–æ—Ç–µ.")

@router.message(BrigBlockUser.waiting_username)
async def brig_block_save(m: Message, state: FSMContext):
    uname = (m.text or "").strip().lstrip("@")
    async with async_session() as session:
        try:
            tg_id = await block_member_by_username(session, uname, blocked_by=m.from_user.id)
            await session.commit()
        except ValueError:
            await m.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ @username. –ß–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É —Ö–æ—Ç—è –±—ã —Ä–∞–∑.")
            return
    await state.clear()
    await m.answer(f"üö´ @{uname} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –î–æ—Å—Ç—É–ø –∫ –æ–ø—Ä–æ—Å–∞–º –∑–∞–∫—Ä—ã—Ç.", reply_markup=kb_brig_menu())

# -------- Stats for members + CSV export --------
@router.message(F.text == BTN_BRIG_STATS)
async def brig_stats_start(m: Message, state: FSMContext):
    async with async_session() as session:
        if not await is_brig_logged_in(session, m.from_user.id):
            await m.answer("‚õîÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –±—Ä–∏–≥–∞–¥–∏—Ä.")
            return
    await state.set_state(BrigStats.waiting_range)
    await m.answer("–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –≤–∞—à–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º?", reply_markup=kb_export_ranges())

@router.message(F.text == BTN_BRIG_EXPORT_XLSX)
async def brig_export_start(m: Message, state: FSMContext):
    async with async_session() as session:
        if not await is_brig_logged_in(session, m.from_user.id):
            await m.answer("‚õîÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –±—Ä–∏–≥–∞–¥–∏—Ä —á–µ—Ä–µ–∑ ¬´üîë –î–æ—Å—Ç—É–ø¬ª.")
            return
    await state.set_state(BrigStats.waiting_range)
    await state.update_data(export_only=True)   # —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª, –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –ø—Ä–æ—Å—Ç—ã–Ω–∏
    await m.answer("–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã–≥—Ä—É–∑–∏—Ç—å XLSX –ø–æ –≤–∞—à–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º?", reply_markup=kb_export_ranges())

class BrigUnblockUser(StatesGroup):
    waiting_username = State()

@router.message(F.text == BTN_BRIG_UNBLOCK)
async def brig_unblock_ask(m: Message, state: FSMContext):
    async with async_session() as session:
        if not await is_brig_logged_in(session, m.from_user.id):
            await m.answer("‚õîÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –±—Ä–∏–≥–∞–¥–∏—Ä.")
            return
    await state.set_state(BrigUnblockUser.waiting_username)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ @username —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ ‚ôªÔ∏è <b>—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å</b>.")

@router.message(BrigUnblockUser.waiting_username)
async def brig_unblock_save(m: Message, state: FSMContext):
    uname = (m.text or "").strip().lstrip("@")
    async with async_session() as session:
        try:
            await unblock_member_by_username(session, uname)
            await session.commit()
        except ValueError:
            await m.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ @username. –ß–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É.")
            return
    await state.clear()
    await m.answer(f"‚ôªÔ∏è @{uname} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –î–æ—Å—Ç—É–ø –∫ –æ–ø—Ä–æ—Å–∞–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=kb_brig_menu())

@router.message(F.text == BTN_BRIG_HELP)
async def brig_help(m: Message):
    text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –±—Ä–∏–≥–∞–¥–∏—Ä—É</b>\n"
        "‚Äî ¬´–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤¬ª ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –≤–∞–º.\n"
        "‚Äî ¬´–ü—Ä–∏–≤—è–∑–∞—Ç—å/–û—Ç–≤—è–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞¬ª ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–π –±—Ä–∏–≥–∞–¥–æ–π.\n"
        "‚Äî ¬´–°–≤–æ–¥–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º¬ª ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥.\n"
        "‚Äî ¬´–≠–∫—Å–ø–æ—Ä—Ç XLSX¬ª ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
    )
    await m.answer(text, reply_markup=kb_brig_menu())

@router.message(
    BrigStats.waiting_range,
    F.text.in_([BTN_EXP_TODAY, BTN_EXP_7, BTN_EXP_30, BTN_EXP_ALL, BTN_BACK]),
)
async def brig_stats_run(m: Message, state: FSMContext):
    if m.text == BTN_BACK:
        await state.clear()
        await m.answer("üßë‚Äç‚úàÔ∏è –ú–µ–Ω—é –±—Ä–∏–≥–∞–¥–∏—Ä–∞", reply_markup=kb_brig_menu())
        return

    data_state = await state.get_data()
    export_only = bool(data_state.get("export_only", False))

    # –ø–µ—Ä–∏–æ–¥
    days = None
    title = "–∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥"
    if m.text == BTN_EXP_TODAY:
        days, title = 1, "–∑–∞ 1 –¥–µ–Ω—å"
    elif m.text == BTN_EXP_7:
        days, title = 7, "–∑–∞ 7 –¥–Ω–µ–π"
    elif m.text == BTN_EXP_30:
        days, title = 30, "–∑–∞ 30 –¥–Ω–µ–π"

    # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¢–û–õ–¨–ö–û –ø–æ –ø–æ–¥–æ–ø–µ—á–Ω—ã–º —ç—Ç–æ–≥–æ –±—Ä–∏–≥–∞–¥–∏—Ä–∞
    async with async_session() as session:
        agent_ids = await list_brigadier_member_agent_ids(session, m.from_user.id)
        all_stats = await agents_stats_for_period(session, days)
        await session.commit()

    stats = [s for s in all_stats if s.get("agent_id") in set(agent_ids)]
    if not stats:
        await state.clear()
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∞—à–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", reply_markup=kb_brig_menu())
        return

    # –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï —Ä–µ–∂–∏–º "—Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç")
    if not export_only:
        lines = [f"<b>üìà –°–≤–æ–¥–∫–∞ –ø–æ –≤–∞—à–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º ({title})</b>"]
        for s in stats:
            uname = s.get("agent_username") or "(–±–µ–∑ @)"
            name = s.get("agent_name") or ""
            header = f"{uname} {name}".strip()
            lines.append(
                f"{header}\n"
                f"  –í—Å–µ–≥–æ: {s.get('total',0)} | –°–æ–≥–ª–∞—Å–∏–µ: {s.get('consent',0)} | –û—Ç–∫–∞–∑: {s.get('refusal',0)} | –ù–∏–∫–æ–≥–æ –Ω–µ—Ç: {s.get('no_one',0)}\n"
                f"  –§–ª–∞–µ—Ä—ã ‚Äî –ù–∞ —Ä—É–∫–∏: {s.get('hand',0)} | –í —è—â–∏–∫: {s.get('mailbox',0)} | –ù–µ—Ç: {s.get('none',0)} | –ù–∞–¥–æ–º–∫–∞ (–î–∞): {s.get('home_yes',0)}"
            )
        await m.answer("\n\n".join(lines))

    # ===== XLSX –≤ –ø–∞–º—è—Ç–∏ —Å —Ä—É—Å—Å–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ =====
    headers_ru = [
        "–õ–æ–≥–∏–Ω (@)", "–ò–º—è",
        "–í—Å–µ–≥–æ", "–°–æ–≥–ª–∞—Å–∏–µ", "–û—Ç–∫–∞–∑", "–ù–∏–∫–æ–≥–æ –Ω–µ—Ç",
        "–§–ª–∞–µ—Ä: –Ω–∞ —Ä—É–∫–∏", "–§–ª–∞–µ—Ä: –≤ —è—â–∏–∫", "–§–ª–∞–µ—Ä: –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∏",
        "–ù–∞–¥–æ–º–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (–î–∞)",
    ]
    # –ø–æ—Ä—è–¥–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞–º:
    rows = []
    for s in stats:
        rows.append([
            s.get("agent_username") or "",
            s.get("agent_name") or "",
            s.get("total", 0), s.get("consent", 0), s.get("refusal", 0), s.get("no_one", 0),
            s.get("hand", 0), s.get("mailbox", 0), s.get("none", 0), s.get("home_yes", 0),
        ])

    bio = io.BytesIO()
    if pd is not None:
        # pandas + xlsxwriter ‚Üí –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            df = pd.DataFrame(rows, columns=headers_ru)
            with pd.ExcelWriter(bio, engine="xlsxwriter") as writer:
                df.to_excel(writer, index=False, sheet_name="–°–≤–æ–¥–∫–∞")
                ws = writer.sheets["–°–≤–æ–¥–∫–∞"]
                wb = writer.book

                # –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —à–∞–ø–∫–∏
                header_fmt = wb.add_format({"bold": True, "valign": "top", "text_wrap": True})
                ws.set_row(0, None, header_fmt)

                # –∑–∞–º–æ—Ä–æ–∑–∫–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –∞–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä
                ws.freeze_panes(1, 0)
                ws.autofilter(0, 0, len(df), len(headers_ru) - 1)

                # –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
                widths = [18, 22, 8, 10, 10, 12, 16, 16, 18, 22]
                for i, w in enumerate(widths):
                    ws.set_column(i, i, w)
        except Exception:
            # –§–æ–ª–±—ç–∫: openpyxl
            from openpyxl import Workbook
            from openpyxl.styles import Font
            from openpyxl.utils import get_column_letter

            wb = Workbook()
            ws = wb.active
            ws.title = "–°–≤–æ–¥–∫–∞"
            ws.append(headers_ru)
            for r in rows:
                ws.append(r)
            # –∂–∏—Ä–Ω–∞—è —à–∞–ø–∫–∞
            for cell in ws[1]:
                cell.font = Font(bold=True)
            # –∑–∞–º–æ—Ä–æ–∑–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä
            ws.freeze_panes = "A2"
            ws.auto_filter.ref = f"A1:J{len(rows)+1}"
            # —à–∏—Ä–∏–Ω—ã
            widths = [18, 22, 8, 10, 10, 12, 16, 16, 18, 22]
            for i, w in enumerate(widths, start=1):
                ws.column_dimensions[get_column_letter(i)].width = w
            wb.save(bio)
    else:
        # –ß–∏—Å—Ç—ã–π openpyxl (–µ—Å–ª–∏ pandas –Ω–µ—Ç)
        from openpyxl import Workbook
        from openpyxl.styles import Font
        from openpyxl.utils import get_column_letter

        wb = Workbook()
        ws = wb.active
        ws.title = "–°–≤–æ–¥–∫–∞"
        ws.append(headers_ru)
        for r in rows:
            ws.append(r)
        for cell in ws[1]:
            cell.font = Font(bold=True)
        ws.freeze_panes = "A2"
        ws.auto_filter.ref = f"A1:J{len(rows)+1}"
        widths = [18, 22, 8, 10, 10, 12, 16, 16, 18, 22]
        for i, w in enumerate(widths, start=1):
            ws.column_dimensions[get_column_letter(i)].width = w
        wb.save(bio)

    data = bio.getvalue()
    filename = f"brig_stats_{(days or 0)}d_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
    await m.answer_document(BufferedInputFile(data, filename=filename))

    await state.clear()
    await m.answer("üßë‚Äç‚úàÔ∏è –ú–µ–Ω—é –±—Ä–∏–≥–∞–¥–∏—Ä–∞", reply_markup=kb_brig_menu())
