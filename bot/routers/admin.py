from __future__ import annotations

import logging
import html
from datetime import datetime
from pathlib import Path
import tempfile

from aiogram import Router, F
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from ..config import settings
from ..db import async_session
from ..repo import (
    # –±–∞–∑–æ–≤–æ–µ
    list_contacts_for_period,
    get_or_create_agent,
    agents_stats_for_period,
    # –±—Ä–∏–≥–∞–¥–∏—Ä—ã
    ensure_brig_tables,
    add_brigadier,
    set_brig_member,
    get_agent_by_username,   # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
    demote_brigadier, 
    list_brigadiers,
    resolve_username_to_tg,
)
from ..utils.excel import rows_to_dataframe, write_excel_with_pivot, write_admin_summary
from ..keyboards import (
    # –º–µ–Ω—é/–¥–æ—Å—Ç—É–ø
    BTN_ADMIN, BTN_ADMIN_LOGIN, BTN_ADMIN_LOGOUT, BTN_ADMIN_HELP, 
    BTN_ADMIN_STATS_ALL, BTN_ADMIN_ACCESS, BTN_ACCESS_DEMOTE,
    kb_admin_menu, kb_main, kb_admin_access_menu, kb_cancel, BTN_ADMIN_ACCESS, BTN_ACCESS_DEMOTE, BTN_BACK,

    # —ç–∫—Å–ø–æ—Ä—Ç
    BTN_ADMIN_EXPORT_XLSX, BTN_ADMIN_EXPORT_CSV,
    BTN_XLSX_ALL, BTN_CSV_ALL,
    kb_admin_export_xlsx, kb_admin_export_csv,

    # –ø–µ—Ä–∏–æ–¥—ã
    kb_export_ranges,
    BTN_EXP_TODAY, BTN_EXP_7, BTN_EXP_30, BTN_EXP_ALL, BTN_BACK,

    # –¥–æ—Å—Ç—É–ø—ã (–∫–Ω–æ–ø–∫–∏ –ø–æ–¥–º–µ–Ω—é)
    BTN_ACCESS_ADD_BRIG, BTN_ACCESS_ATTACH_MEMBER, BTN_ACCESS_LIST,
)

from ..states import AdminAuth, AdminExport, AdminAccess
from sqlalchemy import select           # ‚Üê –Ω—É–∂–Ω–æ –¥–ª—è select(Agent)
from ..models import Agent              # ‚Üê —á—Ç–æ–±—ã select(Agent) —Ä–∞–±–æ—Ç–∞–ª

logger = logging.getLogger(__name__)
router = Router(name="admin")


# ----- STATES -----
class AdminStats(StatesGroup):
    waiting_range = State()

class AdminDemoteBrig(StatesGroup):
    waiting_username_or_id = State()

# ----- HELPERS -----
async def _is_admin_logged(user_id: int) -> bool:
    async with async_session() as session:
        agent = await get_or_create_agent(session, user_id)
        await session.commit()
        return bool(getattr(agent, "admin_logged_in", False))

@router.message(F.text == BTN_ACCESS_DEMOTE)
async def admin_access_demote_brig_start(m: Message, state: FSMContext):
    await state.set_state(AdminDemoteBrig.waiting_username_or_id)
    await m.answer(
        "–í–≤–µ–¥–∏—Ç–µ @username –±—Ä–∏–≥–∞–¥–∏—Ä–∞ –∏–ª–∏ –µ–≥–æ —á–∏—Å–ª–æ–≤–æ–π Telegram ID, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å.",
        reply_markup=kb_cancel()
    )

# ===== AUTH / MENU =====
@router.message(F.text == BTN_ADMIN_LOGIN)
async def admin_login_start(m: Message, state: FSMContext):
    if await _is_admin_logged(m.from_user.id):
        await m.answer("–í—ã —É–∂–µ –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω.", reply_markup=kb_admin_menu())
        return
    await m.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb_main(is_admin=False))
    await state.set_state(AdminAuth.waiting_login)


@router.message(AdminAuth.waiting_login)
async def admin_login_get_login(m: Message, state: FSMContext):
    await state.update_data(admin_login=(m.text or "").strip())
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(AdminAuth.waiting_password)


@router.message(AdminAuth.waiting_password)
async def admin_login_get_pass(m: Message, state: FSMContext):
    data = await state.get_data()
    login = data.get("admin_login", "")
    password = (m.text or "").strip()

    if login == settings.ADMIN_LOGIN and password == settings.ADMIN_PASSWORD:
        async with async_session() as session:
            agent = await get_or_create_agent(session, m.from_user.id)
            agent.admin_logged_in = True
            await session.commit()
        await state.clear()
        await m.answer("‚úÖ –ê–¥–º–∏–Ω-–≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.", reply_markup=kb_admin_menu())
    else:
        await state.clear()
        await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.", reply_markup=kb_main(is_admin=False))


@router.message(F.text == BTN_ADMIN_LOGOUT)
async def admin_logout(m: Message, state: FSMContext):
    async with async_session() as session:
        agent = await get_or_create_agent(session, m.from_user.id)
        agent.admin_logged_in = False
        await session.commit()
    await state.clear()
    await m.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞.", reply_markup=kb_main(is_admin=False))


@router.message(F.text == BTN_ADMIN)
async def admin_menu_cmd(m: Message):
    if not await _is_admin_logged(m.from_user.id):
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await m.answer("üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=kb_admin_menu())


@router.message(F.text == BTN_ADMIN_HELP)
async def admin_help(m: Message):
    if not await _is_admin_logged(m.from_user.id):
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await m.answer(
        "–≠–∫—Å–ø–æ—Ä—Ç: XLSX –∏ CSV (—Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞). "
        "–í XLSX: –ª–∏—Å—Ç—ã data, summary, pivot_multi, pivot_flat. "
        "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∏ XLSX-—Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º."
    )


# ===== EXPORT XLSX / CSV =====
@router.message(F.text == BTN_ADMIN_EXPORT_XLSX)
async def admin_export_xlsx_menu(m: Message):
    if not await _is_admin_logged(m.from_user.id):
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await m.answer("üì¶ –≠–∫—Å–ø–æ—Ä—Ç XLSX ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb_admin_export_xlsx())


@router.message(F.text == BTN_XLSX_ALL)
async def admin_export_xlsx_choose_range(m: Message, state: FSMContext):
    if not await _is_admin_logged(m.from_user.id):
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await state.update_data(fmt="xlsx")
    await state.set_state(AdminExport.waiting_range)
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb_export_ranges())


@router.message(F.text == BTN_ADMIN_EXPORT_CSV)
async def admin_export_csv_menu(m: Message):
    if not await _is_admin_logged(m.from_user.id):
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await m.answer("üì¶ –≠–∫—Å–ø–æ—Ä—Ç CSV ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb_admin_export_csv())


@router.message(F.text == BTN_CSV_ALL)
async def admin_export_csv_choose_range(m: Message, state: FSMContext):
    if not await _is_admin_logged(m.from_user.id):
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await state.update_data(fmt="csv")
    await state.set_state(AdminExport.waiting_range)
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb_export_ranges())


@router.message(AdminExport.waiting_range, F.text.in_([BTN_EXP_TODAY, BTN_EXP_7, BTN_EXP_30, BTN_EXP_ALL, BTN_BACK]))
async def admin_export_do(m: Message, state: FSMContext):
    if not await _is_admin_logged(m.from_user.id):
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    if m.text == BTN_BACK:
        await state.clear()
        await m.answer("üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=kb_admin_menu())
        return

    # –ø–µ—Ä–∏–æ–¥
    days = None
    label = "–∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥"
    if m.text == BTN_EXP_TODAY:
        days, label = 1, "–∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    elif m.text == BTN_EXP_7:
        days, label = 7, "–∑–∞ 7 –¥–Ω–µ–π"
    elif m.text == BTN_EXP_30:
        days, label = 30, "–∑–∞ 30 –¥–Ω–µ–π"

    fmt = (await state.get_data()).get("fmt", "xlsx")

    try:
        async with async_session() as session:
            rows = await list_contacts_for_period(session, days=days)
        df = rows_to_dataframe(rows)
        total = len(df.index)
        if total == 0:
            await state.clear()
            await m.answer("–ó–∞–ø–∏—Å–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç.", reply_markup=kb_admin_menu())
            return

        ts = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
        base = Path(tempfile.gettempdir()) / f"export_{ts}"

        if fmt == "xlsx":
            xlsx_path = base.with_suffix(".xlsx")
            try:
                write_excel_with_pivot(df, str(xlsx_path))
                await m.answer_document(
                    FSInputFile(str(xlsx_path)),
                    caption=f"XLSX ({label}). –°—Ç—Ä–æ–∫: {total}."
                )
            except Exception as e:
                logger.exception("XLSX export failed")
                csv_path = base.with_suffix(".csv")
                df.to_csv(str(csv_path), index=False, encoding="utf-8-sig")
                await m.answer_document(
                    FSInputFile(str(csv_path)),
                    caption="XLSX –Ω–µ —Å–æ–±—Ä–∞–ª—Å—è. –û—Ç–ø—Ä–∞–≤–ª—è—é CSV. –û—à–∏–±–∫–∞: " + html.escape(str(e))
                )
        else:
            csv_path = base.with_suffix(".csv")
            df.to_csv(str(csv_path), index=False, encoding="utf-8-sig")
            await m.answer_document(
                FSInputFile(str(csv_path)),
                caption=f"CSV ({label}) ‚Äî UTF-8 BOM. –°—Ç—Ä–æ–∫: {total}."
            )
    except Exception as e:
        logger.exception("Export handler failed")
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç: " + html.escape(str(e)))
    finally:
        await state.clear()
        await m.answer("üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=kb_admin_menu())


# ===== STATS: ALL AGENTS =====
@router.message(F.text == BTN_ADMIN_STATS_ALL)
async def admin_stats_all_start(m: Message, state: FSMContext):
    if not await _is_admin_logged(m.from_user.id):
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await m.answer("–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º?", reply_markup=kb_export_ranges())
    await state.set_state(AdminStats.waiting_range)


@router.message(AdminStats.waiting_range, F.text.in_([BTN_EXP_TODAY, BTN_EXP_7, BTN_EXP_30, BTN_EXP_ALL, BTN_BACK]))
async def admin_stats_all_run(m: Message, state: FSMContext):
    if not await _is_admin_logged(m.from_user.id):
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    if m.text == BTN_BACK:
        await state.clear()
        await m.answer("üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=kb_admin_menu())
        return

    days = None
    if m.text == BTN_EXP_TODAY:
        days = 1
    elif m.text == BTN_EXP_7:
        days = 7
    elif m.text == BTN_EXP_30:
        days = 30

    async with async_session() as local_session:
        stats = await agents_stats_for_period(local_session, days)
        await local_session.commit()

    if not stats or all(s.get("total", 0) == 0 for s in stats):
        await state.clear()
        await m.answer("–î–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç.", reply_markup=kb_admin_menu())
        return

    lines = ["<b>üìà –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º</b>"]
    for s in stats[:30]:
        uname = s.get("agent_username") or "(–±–µ–∑ @)"
        name = s.get("agent_name") or ""
        header = f"ID {s.get('agent_id')} {uname} {name}".strip()
        lines.append(
            f"{header}\n"
            f"  –í—Å–µ–≥–æ: {s.get('total',0)} | –°–æ–≥–ª–∞—Å–∏–µ: {s.get('consent',0)} | –û—Ç–∫–∞–∑: {s.get('refusal',0)} | –ù–∏–∫–æ–≥–æ –Ω–µ—Ç: {s.get('no_one',0)}\n"
            f"  –§–ª–∞–µ—Ä—ã ‚Äî –ù–∞ —Ä—É–∫–∏: {s.get('hand',0)} | –í —è—â–∏–∫: {s.get('mailbox',0)} | –ù–µ—Ç: {s.get('none',0)} | –ù–∞–¥–æ–º–∫–∞ (–î–∞): {s.get('home_yes',0)}"
        )
    await m.answer("\n\n".join(lines))

    ts = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
    xlsx_path = Path(tempfile.gettempdir()) / f"admin_stats_{ts}.xlsx"
    try:
        write_admin_summary(stats, str(xlsx_path))
        await m.answer_document(FSInputFile(str(xlsx_path)), caption="–ü–æ–ª–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º (XLSX).")
    except Exception as e:
        logger.exception("Admin stats XLSX failed")
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å XLSX: " + html.escape(str(e)))

    await state.clear()
    await m.answer("üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=kb_admin_menu())


# ====== –î–æ—Å—Ç—É–ø—ã (–±—Ä–∏–≥–∞–¥–∏—Ä—ã) –ø–æ @username ======

@router.message(F.text == BTN_ADMIN_ACCESS)
async def admin_access_menu(m: Message, state: FSMContext):
    if not await _is_admin_logged(m.from_user.id):
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await state.clear()
    await m.answer("üîë –î–æ—Å—Ç—É–ø—ã (–±—Ä–∏–≥–∞–¥–∏—Ä—ã):", reply_markup=kb_admin_access_menu())


# ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –±—Ä–∏–≥–∞–¥–∏—Ä–∞ ‚Äî
@router.message(F.text == BTN_ACCESS_ADD_BRIG)
async def admin_access_add_brigadier_start(m: Message, state: FSMContext):
    if not await _is_admin_logged(m.from_user.id):
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await state.set_state(AdminAccess.waiting_brig_username)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–∑–Ω–∞—á–∞–µ–º –±—Ä–∏–≥–∞–¥–∏—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username).")

@router.message(AdminAccess.waiting_brig_username)
async def admin_access_add_brigadier_save(m: Message, state: FSMContext):
    if not await _is_admin_logged(m.from_user.id):
        await state.clear()
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    raw = (m.text or "").strip()
    if raw.startswith("@"):
        raw = raw[1:]
    if not raw:
        await m.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username).")
        return

    async with async_session() as session:
        await ensure_brig_tables(session)
        tg_id = await resolve_username_to_tg(session, raw)
        if not tg_id:
            await m.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –û–Ω –¥–æ–ª–∂–µ–Ω —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É.")
            return
        await add_brigadier(session, tg_id)
        await session.commit()

    await state.clear()
    await m.answer(f"‚úÖ @{raw} –Ω–∞–∑–Ω–∞—á–µ–Ω –±—Ä–∏–≥–∞–¥–∏—Ä–æ–º.", reply_markup=kb_admin_access_menu())


# ‚Äî –ø—Ä–∏–≤—è–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –±—Ä–∏–≥–∞–¥–∏—Ä—É ‚Äî
@router.message(F.text == BTN_ACCESS_ATTACH_MEMBER)
async def admin_access_attach_start(m: Message, state: FSMContext):
    if not await _is_admin_logged(m.from_user.id):
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await state.set_state(AdminAccess.waiting_attach_brig_username)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ @username –±—Ä–∏–≥–∞–¥–∏—Ä–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.")

@router.message(AdminAccess.waiting_attach_brig_username)
async def admin_access_attach_get_member(m: Message, state: FSMContext):
    raw = (m.text or "").strip()
    if raw.startswith("@"):
        raw = raw[1:]
    if not raw:
        await m.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username –±—Ä–∏–≥–∞–¥–∏—Ä–∞.")
        return
    await state.update_data(brig_username=raw)
    await state.set_state(AdminAccess.waiting_attach_member_username)
    await m.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ @username —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å.")

@router.message(AdminAccess.waiting_attach_member_username)
async def admin_access_attach_save(m: Message, state: FSMContext):
    if not await _is_admin_logged(m.from_user.id):
        await state.clear()
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    raw = (m.text or "").strip()
    if raw.startswith("@"):
        raw = raw[1:]
    if not raw:
        await m.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return

    data = await state.get_data()
    brig_username = data.get("brig_username")

    async with async_session() as session:
        await ensure_brig_tables(session)
        brig_tg = await resolve_username_to_tg(session, brig_username or "")
        member_tg = await resolve_username_to_tg(session, raw)
        if not brig_tg:
            await m.answer(f"–ë—Ä–∏–≥–∞–¥–∏—Ä @{brig_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
        if not member_tg:
            await m.answer(f"–£—á–∞—Å—Ç–Ω–∏–∫ @{raw} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        await set_brig_member(session, brig_tg, member_tg)
        await session.commit()

    await state.clear()
    await m.answer(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ @{raw} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±—Ä–∏–≥–∞–¥–∏—Ä—É @{brig_username}.", reply_markup=kb_admin_access_menu())


# ‚Äî —Å–ø–∏—Å–æ–∫ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤ ‚Äî
@router.message(F.text == BTN_ACCESS_LIST)
async def admin_access_list_brigadiers(m: Message):
    if not await _is_admin_logged(m.from_user.id):
        await m.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    async with async_session() as session:
        await ensure_brig_tables(session)
        items = await list_brigadiers(session)

        # –ü–æ–¥—Ç—è–Ω–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ username/–∏–º–µ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Agent
        # —Å–æ–∑–¥–∞–¥–∏–º –∫–∞—Ä—Ç—ã tg_id -> (@username, name)
        res = await session.execute(select(Agent))
        agents = res.scalars().all()
        uname_by_tg = {a.tg_user_id: (f"@{a.username}" if a.username else "", a.name or "") for a in agents}

    if not items:
        await m.answer("–ë—Ä–∏–≥–∞–¥–∏—Ä–æ–≤ –µ—â—ë –Ω–µ—Ç.", reply_markup=kb_admin_access_menu())
        return

    lines = ["<b>üìã –ë—Ä–∏–≥–∞–¥–∏—Ä—ã</b>"]
    for it in items:
        b_id = it["brig_tg_id"]
        b_un, b_name = uname_by_tg.get(b_id, ("", ""))
        header = f"{b_id} {b_un} {b_name}".strip()
        lines.append(header)
        for mid in it.get("members", []):
            m_un, m_name = uname_by_tg.get(mid, ("", ""))
            lines.append(f"  ‚îî‚îÄ {mid} {m_un} {m_name}".rstrip())

    await m.answer("\n".join(lines), reply_markup=kb_admin_access_menu())

@router.message(AdminDemoteBrig.waiting_username_or_id)
async def admin_access_demote_brig_finish(m: Message, state: FSMContext):
    raw = (m.text or "").strip()

    if raw == BTN_BACK or raw.lower() in ("–æ—Ç–º–µ–Ω–∞", "cancel"):
        await state.clear()
        await m.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb_admin_access_menu())
        return

    tg_id: int | None = None

    if raw.startswith("@"):
        uname = raw.lstrip("@")
        async with async_session() as session:
            agent = await get_agent_by_username(session, uname)
            if not agent:
                await m.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ @username. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –ø–∏—Å–∞–ª –±–æ—Ç—É.")
                return
            tg_id = int(agent.tg_user_id)
    else:
        if not raw.isdigit():
            await m.answer("–ù—É–∂–µ–Ω @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
            return
        tg_id = int(raw)

    async with async_session() as session:
        await demote_brigadier(session, tg_id)
        await session.commit()

    await state.clear()
    await m.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'@'+uname if raw.startswith('@') else tg_id} —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω –∏–∑ –±—Ä–∏–≥–∞–¥–∏—Ä–æ–≤.",
                   reply_markup=kb_admin_access_menu())

